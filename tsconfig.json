{
  "compilerOptions": {
    "target": "ES2016", // Set the target JavaScript version (can be ES3, ES5, ES6, ES2015, ES2016, ES2017, ES2018, ES2019, ES2020, ES2021, or ESNEXT)
    "module": "commonjs", // Set the module system (can be commonjs, amd, system, es6, umd, ts, or none)
    // "lib": ["dom", "dom.iterable", "es5"], // Set the library files to include (can be dom, dom.iterable, es5, es6, es2015, es2016, es2017, es2018, es2019, or es2020)
    // "allowJs": true, // Allow 'import' and 'export' keywords to be used in .js files
    "skipLibCheck": true, // Skip type checking of library files (such as node_modules/)
    // "esModuleInterop": true, // Treat modules as ES6 modules (true), or CommonJS (false)
    // "allowSyntheticDefaultImports": true, // Allow synthetic default imports (those without an explicit 'import {} from "module";' declaration)
    // "strict": true, // Enable strict mode (checks for strict compiler options)
    "newLine": "LF", // Set the newline character for emitting files (can be 'auto', 'lf', 'crlf', or 'cr')
    "forceConsistentCasingInFileNames": true, // Force consistent casing in file names (case-sensitive file systems)
    "noFallthroughCasesInSwitch": true, // Enable error reporting for fallthrough cases in switch statements
    "noImplicitAny": true, // Enable error reporting for expressions and declarations with an implied 'any' type
    "noImplicitThis": true, // Enable error reporting when 'this' is given the type 'any'
    "strictBindCallApply": true, // Enable additional strictness for the 'bind', 'call', and 'apply' methods on functions
    "strictNullChecks": true, // Enable error reporting when a value is null or undefined
    "strictPropertyInitialization": true, // Enable error reporting when class properties are declared but not set in the constructor
    "stripInternal": true, // Disable emitting declarations that have '@internal' in their JSDoc comments
    // **compilerOptions for es6 module**
    "moduleResolution": "node", // Set the module resolution strategy (can be node, classic, or cjs)
    "allowImportingTsExtensions": true, // Allow importing .ts files that are not part of an external module
    // "jsx": "react", // Specify the JSX factory function (can be react, preserve, or legacy)
    // "isolatedModules": true, // Enable isolated modules (only affects imports, not exports)
    // "noEmitOnError": true, // Do not emit any output if any errors are encountered
    // **compilerOptions for commonjs module**
    // "experimentalDecorators": true, // Enable experimental support for TC39 stage 2 draft decorators
    // "sourceMap": true, // Generate a source map for every output JavaScript file
    "declaration": true, // Generate declaration files (.d.ts) for the compiled JavaScript (for external module references)
    "emitDeclarationOnly": true, // Disable emitting files from the compiler (can specify a glob string to emit specific files)
    // "outDir": "./dist", // Set the output directory for the compiled JavaScript files
    // "rootDir": "./src", // Set the root directory for the TypeScript source files
    // "composite": true, // Enable composite projects (projects with multiple root directories)
    "typeRoots": [ // Specify the root folders containing type definition files (can be used with 'types')
      "./node_modules/@types",
      "./src/typings"
    ]
  },
  "include": [ // Specify the files to include in the compilation process
    "src/**/*.ts"
  ],
  "exclude": [ // Specify the files to exclude from the compilation process
    "node_modules/**/*.ts"
  ],
  "watchOptions": { // Specify the watch mode options
    "watchFile": "useFsEvents", // Specify how the TypeScript watch mode works (can be useFsEvents, fixedPollingInterval, or priorityPollingInterval)
    "watchDirectory": "useFsEvents", // Specify how directories are watched on systems that lack recursive file-watching functionality (can be fixedPollingInterval, dynamicPriority, useFsEvents, or useFsEventsOnParentDirectory)
    "fallbackPolling": "dynamicPriority", // Specify the fallback strategy to use if native watch fails (can be fixedPollingInterval, dynamicPriority, or useFsEvents)
    "synchronousWatchDirectory": true, // Enable synchronous directory watching (only effective on Mac and Linux)
    "excludeDirectories": [ // Specify directories to exclude when checking for changes
      "node_modules",
      "dist"
    ],
    "excludeFiles": [ // Specify files to exclude when checking for changes
      "**/*.spec.ts",
      "**/*.js"
    ]
  },
}